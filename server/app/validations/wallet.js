"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _joi = _interopRequireDefault(require("joi"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class WalletValidate {
  static async create(req, res, next) {
    const schema = _joi.default.object().keys({
      income: _joi.default.number().required(),
      expenses: _joi.default.number().required(),
      balance: _joi.default.number().required()
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
  static async topup(req, res, next) {
    const schema = _joi.default.object().keys({
      amount: _joi.default.number().positive().required()
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
  static async withdraw(req, res, next) {
    const schema = _joi.default.object().keys({
      amount: _joi.default.number().positive().required()
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
  static async setMinimumBalance(req, res, next) {
    const schema = _joi.default.object().keys({
      minimumBalance: _joi.default.number().required()
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
}
exports.default = WalletValidate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJXYWxsZXRWYWxpZGF0ZSIsImNyZWF0ZSIsInJlcSIsInJlcyIsIm5leHQiLCJzY2hlbWEiLCJqb2kiLCJvYmplY3QiLCJrZXlzIiwiaW5jb21lIiwibnVtYmVyIiwicmVxdWlyZWQiLCJleHBlbnNlcyIsImJhbGFuY2UiLCJlcnJvciIsInZhbGlkYXRlIiwiYm9keSIsInN0YXR1cyIsImpzb24iLCJtZXNzYWdlIiwiZGV0YWlscyIsInJlcGxhY2UiLCJ0b3B1cCIsImFtb3VudCIsInBvc2l0aXZlIiwid2l0aGRyYXciLCJzZXRNaW5pbXVtQmFsYW5jZSIsIm1pbmltdW1CYWxhbmNlIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwcC92YWxpZGF0aW9ucy93YWxsZXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVxdWVzdCwgUmVzcG9uc2UsIE5leHRGdW5jdGlvbiB9IGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgam9pIGZyb20gJ2pvaSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYWxsZXRWYWxpZGF0ZSB7XHJcbiAgc3RhdGljIGFzeW5jIGNyZWF0ZShcclxuICAgIHJlcTogUmVxdWVzdCxcclxuICAgIHJlczogUmVzcG9uc2UsXHJcbiAgICBuZXh0OiBOZXh0RnVuY3Rpb24sXHJcbiAgKSB7XHJcbiAgICBjb25zdCBzY2hlbWEgPSBqb2kub2JqZWN0KCkua2V5cyh7XHJcbiAgICAgIGluY29tZTogam9pLm51bWJlcigpLnJlcXVpcmVkKCksXHJcbiAgICAgIGV4cGVuc2VzOiBqb2kubnVtYmVyKCkucmVxdWlyZWQoKSxcclxuICAgICAgYmFsYW5jZTogam9pLm51bWJlcigpLnJlcXVpcmVkKCksXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IHNjaGVtYS52YWxpZGF0ZShyZXEuYm9keSk7XHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcclxuICAgICAgICBtZXNzYWdlOiBlcnJvci5kZXRhaWxzWzBdLm1lc3NhZ2UucmVwbGFjZSgvXCIvZywgJycpLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXh0KCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgdG9wdXAoXHJcbiAgICByZXE6IFJlcXVlc3QsXHJcbiAgICByZXM6IFJlc3BvbnNlLFxyXG4gICAgbmV4dDogTmV4dEZ1bmN0aW9uLFxyXG4gICkge1xyXG4gICAgY29uc3Qgc2NoZW1hID0gam9pLm9iamVjdCgpLmtleXMoe1xyXG4gICAgICBhbW91bnQ6IGpvaS5udW1iZXIoKS5wb3NpdGl2ZSgpLnJlcXVpcmVkKCksXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IHNjaGVtYS52YWxpZGF0ZShyZXEuYm9keSk7XHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcclxuICAgICAgICBtZXNzYWdlOiBlcnJvci5kZXRhaWxzWzBdLm1lc3NhZ2UucmVwbGFjZSgvXCIvZywgJycpLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXh0KCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgd2l0aGRyYXcoXHJcbiAgICByZXE6IFJlcXVlc3QsXHJcbiAgICByZXM6IFJlc3BvbnNlLFxyXG4gICAgbmV4dDogTmV4dEZ1bmN0aW9uLFxyXG4gICkge1xyXG4gICAgY29uc3Qgc2NoZW1hID0gam9pLm9iamVjdCgpLmtleXMoe1xyXG4gICAgICBhbW91bnQ6IGpvaS5udW1iZXIoKS5wb3NpdGl2ZSgpLnJlcXVpcmVkKCksXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IHNjaGVtYS52YWxpZGF0ZShyZXEuYm9keSk7XHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcclxuICAgICAgICBtZXNzYWdlOiBlcnJvci5kZXRhaWxzWzBdLm1lc3NhZ2UucmVwbGFjZSgvXCIvZywgJycpLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXh0KCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgc2V0TWluaW11bUJhbGFuY2UoXHJcbiAgICByZXE6IFJlcXVlc3QsXHJcbiAgICByZXM6IFJlc3BvbnNlLFxyXG4gICAgbmV4dDogTmV4dEZ1bmN0aW9uLFxyXG4gICkge1xyXG4gICAgY29uc3Qgc2NoZW1hID0gam9pLm9iamVjdCgpLmtleXMoe1xyXG4gICAgICBtaW5pbXVtQmFsYW5jZTogam9pLm51bWJlcigpLnJlcXVpcmVkKCksXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHsgZXJyb3IgfSA9IHNjaGVtYS52YWxpZGF0ZShyZXEuYm9keSk7XHJcbiAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHtcclxuICAgICAgICBtZXNzYWdlOiBlcnJvci5kZXRhaWxzWzBdLm1lc3NhZ2UucmVwbGFjZSgvXCIvZywgJycpLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXh0KCk7XHJcbiAgfVxyXG59XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7QUFBc0I7QUFFUCxNQUFNQSxjQUFjLENBQUM7RUFDbEMsYUFBYUMsTUFBTSxDQUNqQkMsR0FBWSxFQUNaQyxHQUFhLEVBQ2JDLElBQWtCLEVBQ2xCO0lBQ0EsTUFBTUMsTUFBTSxHQUFHQyxZQUFHLENBQUNDLE1BQU0sRUFBRSxDQUFDQyxJQUFJLENBQUM7TUFDL0JDLE1BQU0sRUFBRUgsWUFBRyxDQUFDSSxNQUFNLEVBQUUsQ0FBQ0MsUUFBUSxFQUFFO01BQy9CQyxRQUFRLEVBQUVOLFlBQUcsQ0FBQ0ksTUFBTSxFQUFFLENBQUNDLFFBQVEsRUFBRTtNQUNqQ0UsT0FBTyxFQUFFUCxZQUFHLENBQUNJLE1BQU0sRUFBRSxDQUFDQyxRQUFRO0lBQ2hDLENBQUMsQ0FB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