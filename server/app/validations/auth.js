"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _joi = _interopRequireDefault(require("joi"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class AuthValidate {
  static async login(req, res, next) {
    const schema = _joi.default.object().keys({
      email: _joi.default.string().required().email(),
      password: _joi.default.string().required()
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
  static async signup(req, res, next) {
    const schema = _joi.default.object().keys({
      firstName: _joi.default.string().required(),
      lastName: _joi.default.string(),
      phoneNumber: _joi.default.string(),
      email: _joi.default.string().required().email(),
      password: _joi.default.string().required(),
      referralCode: _joi.default.string().min(6).max(6)
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
  static async update(req, res, next) {
    const schema = _joi.default.object().keys({
      firstName: _joi.default.string(),
      lastName: _joi.default.string(),
      email: _joi.default.string().email(),
      password: _joi.default.string(),
      role: _joi.default.valid('user', 'admin', 'manager'),
      verified: _joi.default.boolean(),
      phoneNumber: _joi.default.string()
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
  static async resetPassword(req, res, next) {
    const schema = _joi.default.object().keys({
      password: _joi.default.string().min(8).required(),
      token: _joi.default.string().required()
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
  static async forgetPassword(req, res, next) {
    const schema = _joi.default.object().keys({
      email: _joi.default.string().email().allow('')
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
  static async verify(req, res, next) {
    const schema = _joi.default.object().keys({
      token: _joi.default.string().allow('')
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
}
exports.default = AuthValidate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,