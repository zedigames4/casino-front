"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _joi = _interopRequireDefault(require("joi"));
var _constants = require("../utils/constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class BetsValidate {
  static async create(req, res, next) {
    const schema = _joi.default.object().keys({
      game: _joi.default.string().required().label('gameId'),
      iWin: _joi.default.number().positive().required().allow(0),
      iToBet: _joi.default.number().positive().required().allow(0),
      playerData: _joi.default.object(),
      status: _joi.default.string().valid(..._constants.BET_STATUS).required(),
      currency: _joi.default.string().valid('RWF', 'COIN').required(),
      startTime: _joi.default.date(),
      endingTime: _joi.default.date()
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
  static async update(req, res, next) {
    const schema = _joi.default.object().keys({
      game: _joi.default.string().label('gameId'),
      iWin: _joi.default.number().positive().allow(0),
      iToBet: _joi.default.number().positive().allow(0),
      playerData: _joi.default.object(),
      status: _joi.default.string().valid(..._constants.BET_STATUS),
      currency: _joi.default.string().valid('RWF', 'COIN').required(),
      startTime: _joi.default.date(),
      endingTime: _joi.default.date()
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
  static async loose(req, res, next) {
    const schema = _joi.default.object().keys({
      playerData: _joi.default.object().required(),
      expenses: _joi.default.number().required(),
      income: _joi.default.number().required()
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
  static async win(req, res, next) {
    const schema = _joi.default.object().keys({
      playerData: _joi.default.object().required(),
      expenses: _joi.default.number().required(),
      income: _joi.default.number().required()
    });
    const {
      error
    } = schema.validate(req.body);
    if (error) {
      return res.status(400).json({
        message: error.details[0].message.replace(/"/g, '')
      });
    }
    return next();
  }
}
exports.default = BetsValidate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,