"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMonthlyTotals = exports.default = void 0;
var _mongoose = _interopRequireDefault(require("mongoose"));
var _constants = require("../utils/constants");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const BetSchema = new _mongoose.default.Schema({
  user: {
    type: _mongoose.default.Types.ObjectId,
    ref: 'User',
    required: true
  },
  game: {
    type: _mongoose.default.Types.ObjectId,
    ref: 'Game',
    required: true
  },
  iWin: {
    type: Number
  },
  iToBet: {
    type: Number
  },
  playerData: {},
  status: {
    type: String,
    enum: _constants.BET_STATUS,
    default: 'BETTING'
  },
  startTime: {
    type: Date
  },
  endingTime: {
    type: Date
  }
});
BetSchema.set('timestamps', true);
const Bet = _mongoose.default.model('Bet', BetSchema);
var _default = Bet;
exports.default = _default;
const getMonthlyTotals = async (startDate, endDate) => {
  const startOfMonth = new Date(Date.UTC(startDate.getFullYear(), startDate.getMonth(), 1));
  let endOfMonth = new Date(Date.UTC(startDate.getFullYear(), startDate.getMonth() + 1, 0));
  if (endDate) {
    endOfMonth = new Date(Date.UTC(endDate.getFullYear(), endDate.getMonth(), 0));
  }
  const bets = await Bet.find({
    createdAt: {
      $gte: startOfMonth,
      $lt: endOfMonth
    }
  });
  const totalIncome = bets.reduce((acc, bet) => acc + bet.iWin, 0);
  const totalExpense = bets.reduce((acc, bet) => acc + bet.iToBet, 0);
  return {
    totalIncome,
    totalExpense
  };
};
exports.getMonthlyTotals = getMonthlyTotals;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCZXRTY2hlbWEiLCJtb25nb29zZSIsIlNjaGVtYSIsInVzZXIiLCJ0eXBlIiwiVHlwZXMiLCJPYmplY3RJZCIsInJlZiIsInJlcXVpcmVkIiwiZ2FtZSIsImlXaW4iLCJOdW1iZXIiLCJpVG9CZXQiLCJwbGF5ZXJEYXRhIiwic3RhdHVzIiwiU3RyaW5nIiwiZW51bSIsIkJFVF9TVEFUVVMiLCJkZWZhdWx0Iiwic3RhcnRUaW1lIiwiRGF0ZSIsImVuZGluZ1RpbWUiLCJzZXQiLCJCZXQiLCJtb2RlbCIsImdldE1vbnRobHlUb3RhbHMiLCJzdGFydERhdGUiLCJlbmREYXRlIiwic3RhcnRPZk1vbnRoIiwiVVRDIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImVuZE9mTW9udGgiLCJiZXRzIiwiZmluZCIsImNyZWF0ZWRBdCIsIiRndGUiLCIkbHQiLCJ0b3RhbEluY29tZSIsInJlZHVjZSIsImFjYyIsImJldCIsInRvdGFsRXhwZW5zZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcHAvbW9kZWxzL0JldC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xyXG5pbXBvcnQgeyBCRVRfU1RBVFVTIH0gZnJvbSAnLi4vdXRpbHMvY29uc3RhbnRzJztcclxuXHJcbmNvbnN0IEJldFNjaGVtYSA9IG5ldyBtb25nb29zZS5TY2hlbWEoe1xyXG4gIHVzZXI6IHtcclxuICAgIHR5cGU6IG1vbmdvb3NlLlR5cGVzLk9iamVjdElkLFxyXG4gICAgcmVmOiAnVXNlcicsXHJcbiAgICByZXF1aXJlZDogdHJ1ZSxcclxuICB9LFxyXG4gIGdhbWU6IHtcclxuICAgIHR5cGU6IG1vbmdvb3NlLlR5cGVzLk9iamVjdElkLFxyXG4gICAgcmVmOiAnR2FtZScsXHJcbiAgICByZXF1aXJlZDogdHJ1ZSxcclxuICB9LFxyXG4gIGlXaW46IHtcclxuICAgIHR5cGU6IE51bWJlcixcclxuICB9LFxyXG4gIGlUb0JldDoge1xyXG4gICAgdHlwZTogTnVtYmVyLFxyXG4gIH0sXHJcbiAgcGxheWVyRGF0YToge30sXHJcbiAgc3RhdHVzOiB7XHJcbiAgICB0eXBlOiBTdHJpbmcsXHJcbiAgICBlbnVtOiBCRVRfU1RBVFVTLFxyXG4gICAgZGVmYXVsdDogJ0JFVFRJTkcnLFxyXG4gIH0sXHJcbiAgc3RhcnRUaW1lOiB7XHJcbiAgICB0eXBlOiBEYXRlLFxyXG4gIH0sXHJcbiAgZW5kaW5nVGltZToge1xyXG4gICAgdHlwZTogRGF0ZSxcclxuICB9LFxyXG59KTtcclxuXHJcbkJldFNjaGVtYS5zZXQoJ3RpbWVzdGFtcHMnLCB0cnVlKTtcclxuXHJcbmNvbnN0IEJldCA9IG1vbmdvb3NlLm1vZGVsKCdCZXQnLCBCZXRTY2hlbWEpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQmV0O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldE1vbnRobHlUb3RhbHMgPSBhc3luYyAoXHJcbiAgc3RhcnREYXRlOiBEYXRlLFxyXG4gIGVuZERhdGU/OiBEYXRlLFxyXG4pID0+IHtcclxuICBjb25zdCBzdGFydE9mTW9udGggPSBuZXcgRGF0ZShcclxuICAgIERhdGUuVVRDKHN0YXJ0RGF0ZS5nZXRGdWxsWWVhcigpLCBzdGFydERhdGUuZ2V0TW9udGgoKSwgMSksXHJcbiAgKTtcclxuICBsZXQgZW5kT2ZNb250aCA9IG5ldyBEYXRlKFxyXG4gICAgRGF0ZS5VVEMoc3RhcnREYXRlLmdldEZ1bGxZZWFyKCksIHN0YXJ0RGF0ZS5nZXRNb250aCgpICsgMSwgMCksXHJcbiAgKTtcclxuXHJcbiAgaWYgKGVuZERhdGUpIHtcclxuICAgIGVuZE9mTW9udGggPSBuZXcgRGF0ZShcclxuICAgICAgRGF0ZS5VVEMoZW5kRGF0ZS5nZXRGdWxsWWVhcigpLCBlbmREYXRlLmdldE1vbnRoKCksIDApLFxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGJldHMgPSBhd2FpdCBCZXQuZmluZCh7XHJcbiAgICBjcmVhdGVkQXQ6IHsgJGd0ZTogc3RhcnRPZk1vbnRoLCAkbHQ6IGVuZE9mTW9udGggfSxcclxuICB9KTtcclxuXHJcbiAgY29uc3QgdG90YWxJbmNvbWUgPSBiZXRzLnJlZHVjZSgoYWNjLCBiZXQpID0+IGFjYyArIGJldC5pV2luLCAwKTtcclxuICBjb25zdCB0b3RhbEV4cGVuc2UgPSBiZXRzLnJlZHVjZSgoYWNjLCBiZXQpID0+IGFjYyArIGJldC5pVG9CZXQsIDApO1xyXG5cclxuICByZXR1cm4geyB0b3RhbEluY29tZSwgdG90YWxFeHBlbnNlIH07XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUFnRDtBQUVoRCxNQUFNQSxTQUFTLEdBQUcsSUFBSUMsaUJBQVEsQ0FBQ0MsTUFBTSxDQUFDO0VBQ3BDQyxJQUFJLEVBQUU7SUFDSkMsSUFBSSxFQUFFSCxpQkFBUSxDQUFDSSxLQUFLLENBQUNDLFFBQVE7SUFDN0JDLEdBQUcsRUFBRSxNQUFNO0lBQ1hDLFFBQVEsRUFBRTtFQUNaLENBQUM7RUFDREMsSUFBSSxFQUFFO0lBQ0pMLElBQUksRUFBRUgsaUJBQVEsQ0FBQ0ksS0FBSyxDQUFDQyxRQUFRO0lBQzdCQyxHQUFHLEVBQUUsTUFBTTtJQUNYQyxRQUFRLEVBQUU7RUFDWixDQUFDO0VBQ0RFLElBQUksRUFBRTtJQUNKTixJQUFJLEVBQUVPO0VBQ1IsQ0FBQztFQUNEQyxNQUFNLEVBQUU7SUFDTlIsSUFBSSxFQUFFTztFQUNSLENBQUM7RUFDREUsVUFBVSxFQUFFLENBQUMsQ0FBQztFQUNkQyxNQUFNLEVBQUU7SUFDTlYsSUFBSSxFQUFFVyxNQUFNO0lBQ1pDLElBQUksRUFBRUMscUJBQVU7SUFDaEJDLE9BQU8sRUFBRTtFQUNYLENBQUM7RUFDREMsU0FBUyxFQUFFO0lBQ1RmLElBQUksRUFBRWdCO0VBQ1IsQ0FBQztFQUNEQyxVQUFVLEVBQUU7SUFDVmpCLElBQUksRUFBRWdCO0VBQ1I7QUFDRixDQUFDLENBQUM7QUFFRnBCLFNBQVMsQ0FBQ3NCLEdBQUcsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDO0FBRWpDLE1BQU1DLEdBQUcsR0FBR3RCLGlCQUFRLENBQUN1QixLQUFLLENBQUMsS0FBSyxFQUFFeEIsU0FBUyxDQUFDO0FBQUMsZUFFOUJ1QixHQUFHO0FBQUE7QUFFWCxNQUFNRSxnQkFBZ0IsR0FBRyxPQUM5QkMsU0FBZSxFQUNmQyxPQUFjLEtBQ1g7RUFDSCxNQUFNQyxZQUFZLEdBQUcsSUFBSVIsSUFBSSxDQUMzQkEsSUFBSSxDQUFDUyxHQUFHLENBQUNILFNBQVMsQ0FBQ0ksV0FBVyxFQUFFLEVBQUVKLFNBQVMsQ0FBQ0ssUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQzNEO0VBQ0QsSUFBSUMsVUFBVSxHQUFHLElBQUlaLElBQUksQ0FDdkJBLElBQUksQ0FBQ1MsR0FBRyxDQUFDSCxTQUFTLENBQUNJLFdBQVcsRUFBRSxFQUFFSixTQUFTLENBQUNLLFFBQVEsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FDL0Q7RUFFRCxJQUFJSixPQUFPLEVBQUU7SUFDWEssVUFBVSxHQUFHLElBQUlaLElBQUksQ0FDbkJBLElBQUksQ0FBQ1MsR0FBRyxDQUFDRixPQUFPLENBQUNHLFdBQVcsRUFBRSxFQUFFSCxPQUFPLENBQUNJLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUN2RDtFQUNIO0VBRUEsTUFBTUUsSUFBSSxHQUFHLE1BQU1WLEdBQUcsQ0FBQ1csSUFBSSxDQUFDO0lBQzFCQyxTQUFTLEVBQUU7TUFBRUMsSUFBSSxFQUFFUixZQUFZO01BQUVTLEdBQUcsRUFBRUw7SUFBVztFQUNuRCxDQUFDLENBQUM7RUFFRixNQUFNTSxXQUFXLEdBQUdMLElBQUksQ0FBQ00sTUFBTSxDQUFDLENBQUNDLEdBQUcsRUFBRUMsR0FBRyxLQUFLRCxHQUFHLEdBQUdDLEdBQUcsQ0FBQy9CLElBQUksRUFBRSxDQUFDLENBQUM7RUFDaEUsTUFBTWdDLFlBQVksR0FBR1QsSUFBSSxDQUFDTSxNQUFNLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxHQUFHLEtBQUtELEdBQUcsR0FBR0MsR0FBRyxDQUFDN0IsTUFBTSxFQUFFLENBQUMsQ0FBQztFQUVuRSxPQUFPO0lBQUUwQixXQUFXO0lBQUVJO0VBQWEsQ0FBQztBQUN0QyxDQUFDO0FBQUMifQ==