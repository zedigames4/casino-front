"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _HttpException = require("../exceptions/HttpException");
var _keys = _interopRequireDefault(require("../keys"));
var _Game = _interopRequireDefault(require("../models/Game"));
var _file = _interopRequireDefault(require("../utils/file"));
var _helper = require("../utils/helper");
var _pagination = require("../utils/pagination");
var _slug = _interopRequireDefault(require("../utils/slug"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class GameController {}
exports.default = GameController;
_defineProperty(GameController, "getAll", async (req, res) => {
  try {
    const page = Number(req.query.page || 1);
    const limit = Number(req.query.limit || 10);
    const offset = (page - 1) * limit;
    const allData = await _Game.default.find().skip(offset).limit(limit);
    const count = await _Game.default.count();
    const pagination = (0, _pagination.paginate)(count, limit, page);
    const results = allData.map(item => {
      // eslint-disable-next-line no-param-reassign
      item.images = item.images.map(element => (0, _helper.imageUrl)(element));
      // eslint-disable-next-line no-param-reassign
      item.url = `${_keys.default.HOST}/play/${item._id}/${(0, _slug.default)(item.title)}`;
      return item.toJSON();
    });
    res.status(200).json({
      data: results,
      pagination,
      message: 'findAll'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
_defineProperty(GameController, "getOne", async (req, res) => {
  try {
    const {
      id
    } = req.params;
    const findOne = await _Game.default.findById(id);
    if (!findOne) throw new _HttpException.HttpException(409, "Game doesn't exist");
    findOne.images = findOne.images.map(item => (0, _helper.imageUrl)(item));
    findOne.url = `${_keys.default.HOST}/play/${findOne._id}/${(0, _slug.default)(findOne.title)}z`;
    res.status(200).json({
      data: findOne.toJSON(),
      message: 'findOne'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
_defineProperty(GameController, "create", async (req, res) => {
  try {
    const itemData = req.body;
    if (!req.files?.length) {
      throw new _HttpException.HttpException(400, 'Game images are required');
    }
    itemData.images = req.files.map(item => item.filename);
    const createItemData = new _Game.default(itemData);
    const newData = await createItemData.save();
    newData.images = newData.images.map(item => (0, _helper.imageUrl)(item));
    newData.url = `${_keys.default.HOST}/play/${newData._id}/${(0, _slug.default)(newData.title)}`;
    res.status(201).json({
      data: newData.toJSON(),
      message: 'created'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
_defineProperty(GameController, "updateItem", async (req, res) => {
  try {
    const {
      id
    } = req.params;
    const itemData = req.body;
    const findOne = await _Game.default.findById({
      _id: id
    });
    if (!findOne) throw new _HttpException.HttpException(409, "Game doesn't exist");
    if (req.files?.length) {
      itemData.images = req.files.map(item => item.filename);
      (0, _file.default)(findOne.images);
    }
    await _Game.default.updateOne({
      _id: id
    }, itemData);
    const updateItem = await _Game.default.findById({
      _id: id
    });
    updateItem.images = updateItem.images.map(item => (0, _helper.imageUrl)(item));
    updateItem.url = `${_keys.default.HOST}/play/${updateItem._id}/${(0, _slug.default)(updateItem.title)}`;
    res.status(200).json({
      data: updateItem.toJSON(),
      message: 'updated'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
_defineProperty(GameController, "delete", async (req, res) => {
  try {
    const {
      id
    } = req.params;
    const findOne = await _Game.default.findById({
      _id: id
    });
    if (!findOne) throw new _HttpException.HttpException(409, "Game doesn't exist");
    await _Game.default.deleteOne({
      _id: id
    });
    (0, _file.default)(findOne.images);
    findOne.images = findOne.images.map(item => (0, _helper.imageUrl)(item));
    findOne.url = `${_keys.default.HOST}/play/${findOne._id}/${(0, _slug.default)(findOne.title)}z`;
    res.status(200).json({
      data: findOne.toJSON(),
      message: 'deleted'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,