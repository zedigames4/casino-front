"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _HttpException = require("../exceptions/HttpException");
var _Bet = _interopRequireDefault(require("../models/Bet"));
var _Setting = _interopRequireDefault(require("../models/Setting"));
var _Wallet = _interopRequireDefault(require("../models/Wallet"));
var _constants = require("../utils/constants");
var _helper = require("../utils/helper");
var _pagination = require("../utils/pagination");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class BetController {}
exports.default = BetController;
_defineProperty(BetController, "getAll", async (req, res) => {
  try {
    const page = Number(req.query.page || 1);
    const limit = Number(req.query.limit || 10);
    const offset = (page - 1) * limit;
    const sort = String(req.query.sort || 'createdAt');
    const query = {};
    if (!(0, _helper.isRoleAllowed)(req.user.role)) {
      query.user = req.user._id;
    }
    const betStatus = req.query.status;
    if (betStatus && _constants.BET_STATUS.includes(betStatus.toUpperCase())) {
      query.status = betStatus;
    }
    const allData = await _Bet.default.find(query).select('user game iWin iToBet status createdAt').populate('user', '-_id firstName lastName email').populate('game', '-_id title').sort({
      [sort]: -1
    }).skip(offset).limit(limit);
    const count = await _Bet.default.count(query);
    const pagination = (0, _pagination.paginate)(count, limit, page);
    res.status(200).json({
      data: allData,
      pagination,
      message: 'findAll'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
_defineProperty(BetController, "publicGetAll", async (req, res) => {
  try {
    const page = Number(req.query.page || 1);
    const limit = Number(req.query.limit || 10);
    const offset = (page - 1) * limit;
    const sort = String(req.query.sort || 'startTime');
    const query = {};
    const betStatus = req.query.status;
    if (betStatus && _constants.BET_STATUS.includes(betStatus.toUpperCase())) {
      query.status = betStatus;
    }
    const allData = await _Bet.default.find(query).populate('user', '-_id firstName lastName email').populate('game', '-_id title').sort({
      [sort]: -1
    }).skip(offset).limit(limit);
    const count = await _Bet.default.count(query);
    const pagination = (0, _pagination.paginate)(count, limit, page);
    res.status(200).json({
      data: allData,
      pagination,
      message: 'findAll'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
_defineProperty(BetController, "getOne", async (req, res) => {
  try {
    const {
      id
    } = req.params;
    const findOne = await _Bet.default.findById(id).populate('user', '-_id firstName lastName email').populate('game', '-_id title');
    if (!findOne) throw new _HttpException.HttpException(409, "Bet doesn't exist");
    res.status(200).json({
      data: _objectSpread(_objectSpread({}, findOne.toJSON()), {}, {
        balanceInCoin: req.user.balanceInCoin
      }),
      message: 'findOne'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
_defineProperty(BetController, "create", async (req, res) => {
  try {
    if (['admin'].includes(req.user.role)) {
      throw new _HttpException.HttpException(401, 'Admin is not allowed to bet.');
    }
    const itemData = req.body;
    itemData.user = req.user._id;
    let {
      iWin = 0,
      iToBet = 0
    } = itemData;
    const adminWallet = await _Wallet.default.findById(req.adminWallet._id);
    if (!adminWallet) {
      throw new _HttpException.HttpException(409, 'Wait for admin to set up wallet');
    }
    if (adminWallet.minimumBalance >= adminWallet.balance) {
      throw new _HttpException.HttpException(403, 'Insufficient balance');
    }
    if (itemData.currency === 'COIN') {
      const rwf = req.globalSetting?.coinToRwf || 1;
      iWin *= rwf;
      iToBet *= rwf;
    }
    itemData.iWin = iWin;
    itemData.iToBet = iToBet;
    const wallet = await _Wallet.default.findOne({
      user: req.user._id
    });
    if (!wallet) {
      throw new _HttpException.HttpException(409, 'Please, add wallet');
    }
    wallet.set({
      balance: wallet.balance + itemData.iWin - itemData.iToBet,
      expenses: wallet.expenses + itemData.iToBet,
      income: wallet.income + itemData.iWin
    });
    await wallet.save();
    adminWallet.set({
      balance: adminWallet.balance + itemData.iWin + itemData.iToBet,
      expenses: adminWallet.expenses + itemData.iWin,
      income: adminWallet.income - itemData.iWin
    });
    await adminWallet.save();
    const createItemData = new _Bet.default(itemData);
    const newData = await createItemData.save();
    const balanceInCoin = wallet.balance / (req.globalSetting.coinToRwf || 1);
    res.status(201).json({
      data: _objectSpread(_objectSpread({}, newData.toJSON()), {}, {
        balanceInCoin
      }),
      message: 'created'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
_defineProperty(BetController, "updateItem", async (req, res) => {
  try {
    const {
      id
    } = req.params;
    const itemData = req.body;
    const findOne = await _Bet.default.findOne({
      _id: id,
      user: req.user._id
    });
    if (!findOne) throw new _HttpException.HttpException(409, "Bet doesn't exist");
    const adminWallet = await _Wallet.default.findById(req.adminWallet._id);
    let {
      iWin = 0,
      iToBet = 0
    } = itemData;
    const setting = await _Setting.default.findOne({
      isGlobal: true
    });
    if (itemData.currency === 'COIN') {
      const rwf = setting?.coinToRwf || 1;
      iWin *= rwf;
      iToBet *= rwf;
    }
    itemData.iWin = findOne.iWin + iWin;
    itemData.iToBet = findOne.iToBet + iToBet;
    const wallet = await _Wallet.default.findOne({
      user: req.user._id
    });
    if (!wallet) {
      await _Wallet.default.create({
        user: req.user._id
      });
    }
    wallet.set({
      balance: wallet.balance + iWin - iToBet,
      expenses: wallet.expenses + iToBet,
      income: wallet.income + iWin
    });
    await wallet.save();
    adminWallet.set({
      balance: adminWallet.balance + itemData.iWin + itemData.iToBet,
      expenses: adminWallet.expenses + itemData.iWin,
      income: adminWallet.income - itemData.iWin
    });
    await adminWallet.save();
    findOne.set(itemData);
    const updateItem = await findOne.save();
    const balanceInCoin = wallet.balance / (req.globalSetting.coinToRwf || 1);
    res.status(200).json({
      data: _objectSpread(_objectSpread({}, updateItem.toJSON()), {}, {
        balanceInCoin
      }),
      message: 'updated'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
_defineProperty(BetController, "delete", async (req, res) => {
  try {
    const {
      id
    } = req.params;
    const findOne = await _Bet.default.findOne({
      _id: id,
      user: req.user._id
    });
    if (!findOne) throw new _HttpException.HttpException(409, "Bet doesn't exist");
    await _Bet.default.deleteOne({
      _id: id
    });
    res.status(200).json({
      data: findOne,
      message: 'deleted'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,