"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Bet = _interopRequireDefault(require("../models/Bet"));
var _constants = require("../utils/constants");
var _helper = require("../utils/helper");
var _pagination = require("../utils/pagination");
var _User = _interopRequireDefault(require("../models/User"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class WinnersController {
  static encryptUser(user) {
    if (!user) {
      return null;
    }
    const name = user.firstName.toLowerCase();
    let result = '';
    for (let i = 0; i < name.length; i += 1) {
      const replacements = _constants.CIPHER[name[i]];
      const index = Math.floor(Math.random() * replacements.length);
      result += replacements[index];
    }
    return result.toUpperCase();
  }
}
exports.default = WinnersController;
_defineProperty(WinnersController, "biggest", async (req, res) => {
  try {
    const limit = Number(req.query.limit || 10);
    let isEncrypted = Number(req.query.isEncrypted || 0);
    if (!req.user || !(0, _helper.isRoleAllowed)(req.user.role)) {
      isEncrypted = 1;
    }
    const allData = await _Bet.default.aggregate([{
      $group: {
        _id: '$user',
        totalWin: {
          $sum: '$iWin'
        }
      }
    }, {
      $sort: {
        totalWin: -1
      }
    }, {
      $limit: limit
    }]);
    const userIds = allData.map(item => item._id);
    const users = await _User.default.find({
      _id: {
        $in: userIds
      }
    }).select('firstName lastName phoneNumber email');

    // create a map of user documents by their ids
    const userMap = users.reduce((acc, user) => {
      acc[user._id] = user;
      return acc;
    }, {});

    // replace the user ids in the allData array with the corresponding user documents
    const populatedWinners = allData.map(item => ({
      user: !isEncrypted ? userMap[item._id] : WinnersController.encryptUser(userMap[item._id]),
      totalWin: item.totalWin.toFixed(2)
    })).filter(item => !!item.user);
    res.status(200).json({
      data: populatedWinners,
      message: 'findAll'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
_defineProperty(WinnersController, "latest", async (req, res) => {
  try {
    const page = Number(req.query.page || 1);
    const limit = Number(req.query.limit || 10);
    const offset = (page - 1) * limit;
    const sort = String(req.query.sort || 'createdAt');
    let isEncrypted = Number(req.query.isEncrypted || 0);
    if (!req.user || !(0, _helper.isRoleAllowed)(req.user.role)) {
      isEncrypted = 1;
    }
    const query = {
      $or: [{
        status: 'WIN'
      }, {
        status: 'LOOSE'
      }],
      $expr: {
        $gt: ['$iWin', '$iToBet']
      }
    };
    const allData = await _Bet.default.find(query).select('user game iWin iToBet status createdAt').populate('user', '-_id firstName lastName email').populate('game', '-_id title').sort({
      [sort]: -1
    }).skip(offset).limit(limit);
    const count = await _Bet.default.count(query);
    const pagination = (0, _pagination.paginate)(count, limit, page);
    const results = allData.map(item => {
      const element = item.toJSON();
      return {
        betId: element._id,
        user: isEncrypted ? WinnersController.encryptUser(element.user) : element.user,
        game: element.game,
        profit: (element.iWin - element.iToBet).toFixed(2)
      };
    });
    res.status(200).json({
      data: results,
      pagination,
      message: 'findAll'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,