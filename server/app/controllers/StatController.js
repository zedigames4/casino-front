"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _HttpException = require("../exceptions/HttpException");
var _Bet = _interopRequireDefault(require("../models/Bet"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
class StatController {}
exports.default = StatController;
_defineProperty(StatController, "incomeExpense", async (req, res) => {
  try {
    const now = new Date();
    let startDate = new Date(now.getFullYear(), now.getMonth(), 1);
    let endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
    if (req.query.startDate) {
      startDate = new Date(req.query.startDate);
      startDate = new Date(startDate.getFullYear(), startDate.getMonth(), 1);
    }
    if (req.query.endDate) {
      endDate = new Date(req.query.endDate);
      endDate = new Date(endDate.getFullYear(), endDate.getMonth(), 0);
    }
    if (endDate.getTime() < startDate.getTime()) {
      throw new _HttpException.HttpException(400, 'Invalid ending date, at least one month late');
    }
    const myBets = await _Bet.default.find({
      user: req.user._id,
      createdAt: {
        $gte: startDate,
        $lt: endDate
      }
    }).select('iWin iToBet createdAt');

    // console.log(myBets);

    const totalIncome = myBets.reduce((acc, bet) => acc + bet.iWin, 0);
    const totalExpense = myBets.reduce((acc, bet) => acc + bet.iToBet, 0);
    res.status(200).json({
      data: {
        totalIncome,
        totalExpense
      },
      message: 'findOne'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
_defineProperty(StatController, "getChartData", async (req, res) => {
  try {
    const now = new Date();
    let startDate = new Date(now.getFullYear(), now.getMonth() - 12, 1);
    let endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
    if (req.query.startDate) {
      startDate = new Date(req.query.startDate);
      startDate = new Date(startDate.getFullYear(), startDate.getMonth(), 1);
    }
    if (req.query.endDate) {
      endDate = new Date(req.query.endDate);
      endDate = new Date(endDate.getFullYear(), endDate.getMonth(), 0);
    }
    if (endDate.getTime() < startDate.getTime()) {
      throw new _HttpException.HttpException(400, 'Invalid ending date, at least one month late');
    }
    const data = await _Bet.default.aggregate([{
      $match: {
        user: req.user._id,
        createdAt: {
          $gte: new Date(startDate),
          $lt: new Date(endDate)
        }
      }
    }, {
      $group: {
        _id: {
          month: {
            $month: '$createdAt'
          },
          year: {
            $year: '$createdAt'
          }
        },
        totalIncome: {
          $sum: '$iWin'
        },
        totalExpense: {
          $sum: '$iToBet'
        }
      }
    }, {
      $sort: {
        '_id.year': 1,
        '_id.month': 1
      }
    }]);
    const chartData = {
      labels: [],
      datasets: [{
        label: 'Expenses',
        data: []
      }, {
        label: 'Income',
        data: []
      }]
    };
    data.forEach(group => {
      const label = `${group._id.month}-01-${group._id.year}`;
      chartData.labels.push(label);
      chartData.datasets[0].data.push(group.totalExpense);
      chartData.datasets[1].data.push(group.totalIncome);
    });
    res.status(200).json({
      data: chartData,
      message: 'findOne'
    });
  } catch (error) {
    res.status(error?.status || 500).json({
      message: error?.message || 'something went wrong'
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,