"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default2 = _interopRequireDefault(require("../default.responses"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const users = {
  '/api/v1/users': {
    post: {
      tags: ['Users'],
      security: [{
        JWT: []
      }],
      summary: 'create',
      parameters: [{
        in: 'body',
        name: 'user',
        required: true,
        schema: {
          example: {
            firstName: '',
            lastName: '',
            phoneNumber: '',
            email: '',
            password: ''
          }
        }
      }],
      consumes: ['application/json'],
      responses: _default2.default
    },
    get: {
      tags: ['Users'],
      security: [{
        JWT: []
      }],
      summary: 'findAll',
      parameters: [{
        in: 'query',
        name: 'page',
        required: false,
        schema: {
          type: 'integer'
        }
      }, {
        in: 'query',
        name: 'limit',
        required: false,
        schema: {
          type: 'integer'
        }
      }, {
        in: 'query',
        name: 'search',
        required: false,
        description: 'Field to search in are: firstName, lastName, verified, phoneNumber, and role',
        schema: {
          type: 'string',
          example: 'admin'
        }
      }],
      consumes: ['application/json'],
      responses: _default2.default
    }
  },
  '/api/v1/users/{id}': {
    get: {
      tags: ['Users'],
      security: [{
        JWT: []
      }],
      summary: 'findOne',
      parameters: [{
        in: 'path',
        name: 'id',
        required: true,
        schema: {
          type: 'string'
        }
      }],
      consumes: ['application/json'],
      responses: _default2.default
    },
    put: {
      tags: ['Users'],
      security: [{
        JWT: []
      }],
      summary: 'update',
      parameters: [{
        in: 'path',
        name: 'id',
        required: true,
        schema: {
          type: 'string'
        }
      }, {
        in: 'body',
        name: 'user',
        required: true,
        schema: {
          example: {
            firstName: '',
            lastName: '',
            phoneNumber: '',
            email: '',
            password: ''
          }
        }
      }],
      consumes: ['application/json'],
      responses: _default2.default
    },
    delete: {
      tags: ['Users'],
      security: [{
        JWT: []
      }],
      summary: 'delete',
      parameters: [{
        in: 'path',
        name: 'id',
        required: true,
        schema: {
          type: 'string'
        }
      }],
      consumes: ['application/json'],
      responses: _default2.default
    }
  },
  '/api/v1/users/{userId}/referrals': {
    get: {
      tags: ['Users'],
      security: [{
        JWT: []
      }],
      summary: 'findAllReferrals',
      parameters: [{
        in: 'path',
        name: 'userId',
        required: true,
        schema: {
          type: 'string'
        }
      }, {
        in: 'query',
        name: 'page',
        required: false,
        schema: {
          type: 'integer'
        }
      }, {
        in: 'query',
        name: 'limit',
        required: false,
        schema: {
          type: 'integer'
        }
      }],
      consumes: ['application/json'],
      responses: _default2.default
    }
  }
};
var _default = users;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,