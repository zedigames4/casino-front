"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.allowedRoles = void 0;
var _jsonwebtoken = require("jsonwebtoken");
var _HttpException = require("../exceptions/HttpException");
var _keys = _interopRequireDefault(require("../keys"));
var _User = _interopRequireDefault(require("../models/User"));
var _Wallet = _interopRequireDefault(require("../models/Wallet"));
var _Setting = _interopRequireDefault(require("../models/Setting"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const authMiddleware = async (req, res, next) => {
  try {
    const Authorization = req.cookies.Authorization || (req.header('Authorization') ? req.header('Authorization').split('Bearer ')[1] : null);
    if (Authorization) {
      const secretKey = _keys.default.SECRET_KEY;
      const verificationResponse = (0, _jsonwebtoken.verify)(Authorization, secretKey);
      const userId = verificationResponse.id;
      const findUser = await _User.default.findById(userId);
      if (findUser) {
        req.user = findUser;
        req.user.token = Authorization;
        try {
          const adminWallet = await _Wallet.default.findOne({
            isMain: true
          }).populate({
            path: 'user',
            match: {
              'user.role': 'admin'
            }
          });
          req.adminWallet = adminWallet?.toJSON();
        } catch (error) {
          req.globalSetting = {
            coinToRwf: 1
          };
          console.log(error.message);
        }
        try {
          let myWallet = await _Wallet.default.findOne({
            user: userId
          }).populate({
            path: 'user'
          });
          if (!myWallet && userId) {
            myWallet = await _Wallet.default.create({
              user: userId
            });
          }
          req.myWallet = myWallet?.toJSON();
        } catch (error) {
          console.log(error.message);
        }
        try {
          const globalSetting = await _Setting.default.findOne({
            isGlobal: true
          });
          req.globalSetting = globalSetting?.toJSON();
          const {
            balance = 0
          } = req.myWallet;
          const {
            coinToRwf = 1
          } = globalSetting;
          req.user.balanceInCoin = balance / coinToRwf;
        } catch (error) {
          req.user.balanceInCoin = req.myWallet?.balance || 0;
          console.log(error.message);
        }
        next();
      } else {
        res.status(401).json({
          message: 'Wrong authentication token'
        });
      }
    } else {
      res.status(404).json({
        message: 'Authentication token missing'
      });
    }
  } catch (error) {
    res.status(401).json({
      message: 'Wrong authentication token'
    });
  }
};
const allowedRoles = async (req, res, next) => {
  try {
    const {
      user
    } = req;
    if (!user) {
      throw new _HttpException.HttpException(404, 'You are not authenticated');
    }
    const {
      role
    } = user;
    if (!['admin'].includes(role)) {
      throw new _HttpException.HttpException(401, 'You are not authorized');
    }
    next();
  } catch (error) {
    res.status(error.status || 500).json({
      message: error.message || 'Something went '
    });
  }
};
exports.allowedRoles = allowedRoles;
var _default = authMiddleware;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,